generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String     @id
  name               String
  password           String
  status             UserStatus
  joinedAt           DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  needPasswordChange Boolean    @default(true)

  @@map("admins")
}

model Staff {
  id          String     @id
  name        String
  nid         String     @unique
  phone       String     @unique
  dob         DateTime
  bloodGroup  String
  salary      Float
  designation String
  address     String
  role        StaffRole
  joinedAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      UserStatus
  Salary      Salary[]

  @@map("staffs")
}

model Teacher {
  id          String     @id
  password    String
  name        String
  nid         String     @unique
  phone       String     @unique
  dob         DateTime
  bloodGroup  String
  salary      Float
  designation String
  address     String
  education   Json
  role        StaffRole
  joinedAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      UserStatus

  classrooms Classroom[]
  Salary     Salary[]

  @@map("teachers")
}

enum StaffRole {
  ADMIN
  ACCOUNTANT
  OTHER
}

model Student {
  id         String   @id
  password   String
  name       String
  birthId    String   @unique
  phone      String   @unique
  dob        DateTime
  bloodGroup String
  class      Int

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  address    String
  parents    Json
  guardian   Json
  admittedAt DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     UserStatus

  Payment Payment[]

  @@map("studnents")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Class {
  id        String   @id @default(uuid())
  name      String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classrooms Classroom[]

  @@map("classes")
}

model Classroom {
  id   String @id @default(uuid())
  name String

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  classTeacherId String
  classTeacher   Teacher @relation(fields: [classTeacherId], references: [id])

  createdAt DateTime

  students Student[]

  @@map("classrooms")
}

model Payment {
  id        String      @id @default(uuid())
  amount    Float
  month     Int
  year      Int
  createdAt DateTime
  type      PaymentType

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@map("payments")
}

enum PaymentType {
  ADMISSION_FEE
  MONTHLY_FEE
  OTHERS
}

model Salary {
  id        String     @id @default(uuid())
  amount    Float
  month     Int
  year      Int
  createdAt DateTime
  type      SalaryType

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  staffId String?
  staff   Staff?  @relation(fields: [staffId], references: [id])

  @@map("salaries")
}

enum SalaryType {
  MONTHLY_SALARY
  BONUOUS
  OTHER
}

model Expense {
  id     String @id @default(uuid())
  amount Float

  categoryId String
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])

  createdAt DateTime

  @@map("expenses")
}

model ExpenseCategory {
  id      String    @id @default(uuid())
  name    String    @unique
  Expense Expense[]

  @@map("expense_ctagories")
}

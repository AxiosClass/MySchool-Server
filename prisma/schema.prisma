generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             String     @id
  name               String
  password           String
  status             UserStatus @default(ACTIVE)
  role               UserRole
  joinedAt           DateTime   @default(now())
  updateAt           DateTime   @updatedAt
  needPasswordChange Boolean    @default(true)
  addedStudents      Student[]

  @@map("users")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  PENDING
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
  MODERATOR
  STUDENT
  TEACHER
}

model Staff {
  userId      String    @id @default(uuid())
  name        String
  nid         String    @unique
  phone       String    @unique
  dob         DateTime
  bloodGroup  String
  salary      Float
  designation String
  address     Json
  education   Json?
  role        StaffRole
  joinedAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sections        Section[]
  subjectTeachers SubjectTeacher[]
  salaries        Salary[]

  @@map("staff")
}

enum StaffRole {
  ADMIN
  ACCOUNTANT
  MODERATOR
  TEACHER
  OTHER
}

model Class {
  id        String   @id @default(uuid())
  name      String
  level     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sections Section[]
  subjects SubjectClass[]

  @@map("classes")
}

model SubjectClass {
  name String

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  @@id([name, classId])
  @@map("subject_classes")
}

model Section {
  id   String @id @default(uuid())
  name String

  teacherId String
  teacher   Staff  @relation(fields: [teacherId], references: [userId])

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  subjectTeachers SubjectTeacher[]
  students        Student[]

  @@map("sections")
}

model SubjectTeacher {
  teacherId String
  teacher   Staff  @relation(fields: [teacherId], references: [userId])

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])

  subject String

  @@id([teacherId, sectionId, subject])
  @@map("subject_teachers")
}

model Student {
  userId  String @id
  name    String
  birthId String
  class   String

  classId   String
  classRoom Section @relation(fields: [classId], references: [id])

  dob        DateTime
  bloodGroup String
  parents    Json
  guardian   Json
  isDeleted  Boolean  @default(false)
  admittedAt DateTime @default(now())
  address    Json

  admittedByUserId String
  admittedBy       User   @relation(fields: [admittedByUserId], references: [userId])

  payments Payment[]

  @@map("students")
}

model Payment {
  paymentId String      @id
  type      PaymentType
  amount    Int
  date      DateTime

  studentId String
  student   Student @relation(fields: [studentId], references: [userId])

  @@map("payments")
}

enum PaymentType {
  ADMISSION_FEE
  MONTHLY_FEE
  EXAM_FEE
  OTHERS
}

model Salary {
  trxId  String     @id @default(uuid())
  type   SalaryType
  amount Int
  date   DateTime

  staffId String
  staff   Staff  @relation(fields: [staffId], references: [userId])

  @@map("salaries")
}

enum SalaryType {
  MONTHLY_SALARY
  BONOUS
  OTHERS
}

model Transaction {
  trxId    String          @id @default(uuid())
  category String
  type     TransactionType
  amount   Int
  date     DateTime

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

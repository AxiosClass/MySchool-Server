generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String     @id
  name               String
  password           String
  status             UserStatus @default(ACTIVE)
  role               AdminRole
  joinedAt           DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  needPasswordChange Boolean    @default(true)

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
}

model Teacher {
  id         String     @id
  password   String
  name       String
  nid        String     @unique
  phone      String     @unique
  dob        DateTime
  bloodGroup String
  salary     Float
  address    String
  education  Json
  joinedAt   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     UserStatus @default(ACTIVE)

  classroomsClassTeacher  Classroom?
  classroomSubjectTeacher ClassroomSubjectTeacher[]

  @@map("teachers")
}

model Student {
  id          String     @id
  password    String
  name        String
  birthId     String     @unique
  dob         DateTime
  bloodGroup  String
  address     String
  parents     Json
  guardian    Json
  admittedAt  DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      UserStatus @default(ACTIVE)
  class       String
  classroomId String
  monthlyFee  Float?

  classroom  Classroom    @relation(fields: [classroomId], references: [id])
  payments   Payment[]
  discounts  Discount[]
  Attendance Attendance[]
  Grade      Grade[]

  @@map("students")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Class {
  id           String   @id @default(uuid())
  name         String   @unique
  level        String   @unique
  monthlyFee   Float
  admissionFee Float
  createdAt    DateTime @default(now())

  classrooms Classroom[]
  subjects   ClassSubject[]

  @@map("classes")
}

model ClassSubject {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  classId   String

  class Class @relation(fields: [classId], references: [id])

  classroomSubjectTeacher ClassroomSubjectTeacher[]
  Grade                   Grade[]

  @@unique([name, classId])
  @@map("class_subjects")
}

model Classroom {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  classId        String
  classTeacherId String   @unique

  class        Class   @relation(fields: [classId], references: [id])
  classTeacher Teacher @relation(fields: [classTeacherId], references: [id])

  students                 Student[]
  classroomSubjectTeachers ClassroomSubjectTeacher[]

  @@unique([classId, name])
  @@map("classrooms")
}

model ClassroomSubjectTeacher {
  id             String   @id @default(uuid())
  assignedAt     DateTime @default(now())
  classSubjectId String
  classroomId    String
  teacherId      String

  subject   ClassSubject @relation(fields: [classSubjectId], references: [id])
  classroom Classroom    @relation(fields: [classroomId], references: [id])
  teacher   Teacher      @relation(fields: [teacherId], references: [id])

  @@unique([classSubjectId, classroomId, teacherId])
  @@map("classroom_subject_teacher")
}

model Exam {
  id        String     @id @default(uuid())
  name      String
  year      Int
  status    ExamStatus @default(PENDING)
  createdAt DateTime   @default(now())
  Grade     Grade[]

  @@map("exams")
}

enum ExamStatus {
  PENDING
  ONGOING
  COMPLETED
}

model Payment {
  id          String      @id @default(uuid())
  amount      Float
  month       Int?
  year        Int
  createdAt   DateTime    @default(now())
  description String?
  type        PaymentType
  studentId   String

  student Student @relation(fields: [studentId], references: [id])

  @@map("payments")
}

enum PaymentType {
  ADMISSION_FEE
  MONTHLY_FEE
  OTHERS
}

model Discount {
  id          String  @id @default(uuid())
  amount      Float
  description String?
  studentId   String

  student Student @relation(fields: [studentId], references: [id])

  @@map("discount")
}

model Notice {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  noticeFor   NoticeFor

  @@map("notices")
}

enum NoticeFor {
  TEACHER
  STUDENT
  ALL
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])

  @@map("attendances")
}

model HoliDay {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())

  @@map("holidays")
}

model Grade {
  id         String @id @default(uuid())
  subjectId  String
  studentId  String
  examId     String
  marks      Float
  totalMarks Float
  grade      String

  subject ClassSubject @relation(fields: [subjectId], references: [id])
  student Student      @relation(fields: [studentId], references: [id])
  exam    Exam         @relation(fields: [examId], references: [id])

  @@unique([subjectId, studentId, examId])
  @@map("grades")
}

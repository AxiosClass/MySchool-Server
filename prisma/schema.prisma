generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String     @id
  name               String
  password           String
  status             UserStatus @default(ACTIVE)
  role               AdminRole
  joinedAt           DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  needPasswordChange Boolean    @default(true)

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
}

model Teacher {
  id                 String     @id
  password           String
  name               String
  nid                String     @unique
  phone              String     @unique
  dob                DateTime
  bloodGroup         String
  salary             Float
  address            String
  education          Json
  joinedAt           DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  status             UserStatus @default(ACTIVE)
  needPasswordChange Boolean    @default(true)

  classroomsClassTeacher  Classroom?
  classroomSubjectTeacher ClassroomSubjectTeacher[]

  @@map("teachers")
}

model Student {
  id                 String     @id
  password           String
  name               String
  birthId            String     @unique
  dob                DateTime
  bloodGroup         String
  address            String
  parents            Json
  guardian           Json
  admittedAt         DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  status             UserStatus @default(ACTIVE)
  class              String
  classroomId        String
  monthlyFee         Float?
  needPasswordChange Boolean    @default(true)
  cardId             String?

  classroom  Classroom    @relation(fields: [classroomId], references: [id])
  payments   Payment[]
  discounts  Discount[]
  Attendance Attendance[]

  @@map("students")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Class {
  id           String   @id @default(uuid())
  name         String   @unique
  level        String   @unique
  monthlyFee   Float
  admissionFee Float
  createdAt    DateTime @default(now())

  classrooms Classroom[]
  subjects   ClassSubject[]

  @@map("classes")
}

model Subject {
  id          String      @id @default(uuid())
  name        String
  type        SubjectType
  parentId    String?
  description String?
  isDeleted   Boolean     @default(false)

  parentSubject           Subject?                  @relation("subject-to-subject", fields: [parentId], references: [id])
  childSUbject            Subject[]                 @relation("subject-to-subject")
  classSubject            ClassSubject[]
  ClassroomSubjectTeacher ClassroomSubjectTeacher[]

  @@map("subjects")
}

enum SubjectType {
  CQ_MCQ
  CQ_MCQ_PRACTICAL
  WRITTEN_FULL
  WRITTEN_HALF
  COMBINED
}

model ClassSubject {
  id        String  @id @default(uuid())
  classId   String?
  subjectId String

  class   Class?  @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@map("class_subjects")
}

model Classroom {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  classId        String
  classTeacherId String   @unique

  class        Class   @relation(fields: [classId], references: [id])
  classTeacher Teacher @relation(fields: [classTeacherId], references: [id])

  students                 Student[]
  classroomSubjectTeachers ClassroomSubjectTeacher[]

  @@unique([classId, name])
  @@map("classrooms")
}

model ClassroomSubjectTeacher {
  id          String   @id @default(uuid())
  subjectId   String
  classroomId String
  teacherId   String
  assignedAt  DateTime @default(now())

  subject   Subject   @relation(fields: [subjectId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])
  teacher   Teacher   @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, classroomId, teacherId])
  @@map("classroom_subject_teacher")
}

model Payment {
  id          String      @id @default(uuid())
  amount      Float
  month       Int?
  year        Int
  createdAt   DateTime    @default(now())
  description String?
  type        PaymentType
  studentId   String

  student Student @relation(fields: [studentId], references: [id])

  @@map("payments")
}

enum PaymentType {
  ADMISSION_FEE
  MONTHLY_FEE
  OTHERS
}

model Discount {
  id          String  @id @default(uuid())
  amount      Float
  description String?
  studentId   String

  student Student @relation(fields: [studentId], references: [id])

  @@map("discount")
}

model Notice {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  noticeFor   NoticeFor

  @@map("notices")
}

enum NoticeFor {
  TEACHER
  STUDENT
  ALL
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])

  @@map("attendances")
}

model HoliDay {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())

  @@map("holidays")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String     @id
  name               String
  password           String
  status             UserStatus @default(ACTIVE)
  role               AdminRole
  joinedAt           DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  needPasswordChange Boolean    @default(true)

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
}

model Staff {
  id          String     @id
  name        String
  nid         String     @unique
  phone       String     @unique
  dob         DateTime
  bloodGroup  String
  salary      Float
  designation String
  address     String
  joinedAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      UserStatus @default(ACTIVE)

  salaries Salary[]

  @@map("staffs")
}

model Teacher {
  id         String     @id
  password   String
  name       String
  nid        String     @unique
  phone      String     @unique
  dob        DateTime
  bloodGroup String
  salary     Float
  address    String
  education  Json
  joinedAt   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     UserStatus @default(ACTIVE)

  salaries                Salary[]
  classroomsClassTeacher  Classroom[]
  classroomSubjectTeacher ClassroomSubjectTeacher[]

  @@map("teachers")
}

model Student {
  id          String     @id
  password    String
  name        String
  birthId     String     @unique
  dob         DateTime
  bloodGroup  String
  address     String
  parents     Json
  guardian    Json
  admittedAt  DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      UserStatus @default(ACTIVE)
  class       String
  classroomId String

  classroom Classroom @relation(fields: [classroomId], references: [id])
  payments  Payment[]

  @@map("students")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Class {
  id        String   @id @default(uuid())
  name      String   @unique
  level     String   @unique
  createdAt DateTime @default(now())

  classrooms Classroom[]
  subjects   ClassSubject[]

  @@map("classes")
}

model ClassSubject {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  classId   String

  class Class @relation(fields: [classId], references: [id])

  classroomSubjectTeacher ClassroomSubjectTeacher[]

  @@unique([name, classId])
  @@map("class_subjects")
}

model Classroom {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  classId        String
  classTeacherId String

  class        Class   @relation(fields: [classId], references: [id])
  classTeacher Teacher @relation(fields: [classTeacherId], references: [id])

  students                 Student[]
  classroomSubjectTeachers ClassroomSubjectTeacher[]

  @@unique([classId, name])
  @@map("classrooms")
}

model ClassroomSubjectTeacher {
  id             String   @id @default(uuid())
  assignedAt     DateTime @default(now())
  classSubjectId String
  classroomId    String
  teacherId      String

  subject   ClassSubject @relation(fields: [classSubjectId], references: [id])
  classroom Classroom    @relation(fields: [classroomId], references: [id])
  teacher   Teacher      @relation(fields: [teacherId], references: [id])

  @@unique([classSubjectId, classroomId, teacherId])
  @@map("classroom_subject_teacher")
}

// overall subject that can be used all other class for name suggestion while admin creating class subjects
model Subject {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())

  @@map("subjects")
}

model Exam {
  id        String   @id
  name      String
  year      Int
  createdAt DateTime @default(now())

  @@map("exams")
}

// to do => model : ExamSubject

model Payment {
  id          String      @id @default(uuid())
  amount      Float
  month       Int
  year        Int
  createdAt   DateTime    @default(now())
  description String?
  type        PaymentType
  studentId   String

  student Student @relation(fields: [studentId], references: [id])

  @@map("payments")
}

enum PaymentType {
  ADMISSION_FEE
  MONTHLY_FEE
  OTHERS
}

model Salary {
  id          String     @id @default(uuid())
  amount      Float
  month       Int
  year        Int
  createdAt   DateTime   @default(now())
  description String?
  type        SalaryType
  teacherId   String?
  staffId     String?

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  staff   Staff?   @relation(fields: [staffId], references: [id])

  @@map("salaries")
}

enum SalaryType {
  MONTHLY_SALARY
  BONUS
  OTHER
}

model Expense {
  id          String   @id @default(uuid())
  amount      Float
  createdAt   DateTime @default(now())
  description String?
  categoryId  String

  category ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model ExpenseCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  expense Expense[]

  @@map("expense_categories")
}

model Notice {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  noticeFor   NoticeFor

  @@map("notices")
}

enum NoticeFor {
  TEACHER
  STAFF
  STUDENT
  ADMIN
}
